from flask import Flask, jsonify, request

app = Flask(__name__)

# In-memory database to store books (replace with a real database in production)
books = []

# Create a book
@app.route('/books', methods=['POST'])
def create_book():
    book_data = request.get_json()
    book = {
        'id': len(books) + 1,
        'book_name': book_data['book_name'],
        'author': book_data['author'],
        'publisher': book_data['publisher']
    }
    books.append(book)
    return jsonify(book), 201

# Read all books
@app.route('/books', methods=['GET'])
def get_all_books():
    return jsonify(books)

# Read a specific book by ID
@app.route('/books/<int:book_id>', methods=['GET'])
def get_book(book_id):
    for book in books:
        if book['id'] == book_id:
            return jsonify(book)
    return jsonify({'message': 'Book not found'}), 404

# Update a book by ID
@app.route('/books/<int:book_id>', methods=['PUT'])
def update_book(book_id):
    for book in books:
        if book['id'] == book_id:
            book_data = request.get_json()
            book['book_name'] = book_data.get('book_name', book['book_name'])
            book['author'] = book_data.get('author', book['author'])
            book['publisher'] = book_data.get('publisher', book['publisher'])
            return jsonify(book)
    return jsonify({'message': 'Book not found'}), 404

# Delete a book by ID
@app.route('/books/<int:book_id>', methods=['DELETE'])
def delete_book(book_id):
    for book in books:
        if book['id'] == book_id:
            books.remove(book)
            return jsonify({'message': 'Book deleted'})
    return jsonify({'message': 'Book not found'}), 404

if __name__ == '__main__':
    app.run()
